install.packages(c("caret", "foba", "glmnet", "Metrics", "ridge", "tidyverse"))
set.seed(19)
set.seed(19)
train.control_6 = trainControl(method = "cv", number = 10, returnResamp = "all")
library(caret)
train.control_6 = trainControl(method = "cv", number = 10, returnResamp = "all")
train.control_6
library(e1071)
library(ggplot2)
library(corrplot)
library(factoextra)
library(Metrics)
library(glmnet)
library(tidyverse)
library(caret)
library(foba)
library(ridge)
setwd("D:/Eng.Comp/2019/2019.2/ICA/HW2")
#                                               Parte 0 - Pre Processamento
# o treino_y e teste_y Ã© a solubilidade de cada composto
treino_x = read.table("solTrainX.txt")
treino_y = read.table("solTrainY.txt")
teste_x = read.table("solTestX.txt")
teste_y = read.table("solTestY.txt")
dim(treino_x)
dim(treino_y)
dim(teste_x)
dim(teste_y)
dataset = rbind(treino_x,teste_x)
dataset["y"] = rbind(treino_y,teste_y)
# sÃ£o 208 Fingerprints(indicadores de molÃ©culas), entÃ£o as Features de interesse sÃ£o as 20 restantes
Cor = cor(dataset[209:228])
dataTreino = treino_x
dataTreino["y"] = treino_y
dataTeste = teste_x
dataTeste["y"] = teste_y
# a matriz de correlaÃ§Ã£o, onde hÃ¡ 34 colunas com correlaÃ§Ã£o > 0.9
png("Matriz_CorrelaÃ§Ã£o_circulos.png")
corrplot(Cor, method = "number")
dev.off()
RemoverCorr = findCorrelation(cor(dataTreino), .9) # ==> 34 elementos
dataTreino = dataTreino[, -RemoverCorr]
dataTeste = dataTreino[, -RemoverCorr]
# Colunas finais removidas : NumAtoms, NumNonHAtoms, NumBonds, NumNonHBonds, NumMultBonds, NumHalogen, SurfaceArea2
#PCA
pca.data = prcomp(treino_x[1:228],scale=TRUE)
pdf("VariÃ¢ncia vs Componentes.pdf")
fviz_eig(pca.data,xlab="Componente",ylab="VariÃ¢ncia",addlabels = TRUE,main="VariÃ¢ncia vs Componentes")
dev.off()
ggplot(dataset,aes(dataset[,1])) + geom_histogram(color="black",fill="springgreen2")+theme_gray()+
labs(x=names(dataset[1]),y="FrequÃªncia")
# Scatter plot
setwd("D:/Eng.Comp/2019/2019.2/ICA/HW2/Histograma")
for(i in 1:228){
ggplot(dataset,aes(dataset[,i])) + geom_histogram(color="black",fill="springgreen2")+theme_gray()+
labs(x=names(dataset[i]),y="FrequÃªncia")
ggsave(paste(names(dataset[i]),".pdf"))
}
dev.off()
setwd("D:/Eng.Comp/2019/2019.2/ICA/HW2")
#                                               Parte 1 - Ordinary Linear Regression
#                                               Parte 2 - LÂ² Penalized Linear Regression
#                                               Parte 3 - PLS ou PCR
dataTreino["y"] = treino_y
library(AppliedPredictiveModeling)
library(e1071)
library(ggplot2)
library(corrplot)
library(factoextra)
library(Metrics)
library(glmnet)
library(tidyverse)
library(caret)
library(foba)
library(ridge)
setwd("D:/Eng.Comp/2019/2019.2/ICA/HW2")
#                                               Parte 0 - Pre Processamento
# o treino_y e teste_y Ã© a solubilidade de cada composto
treino_x = read.table("solTrainX.txt")
treino_y = read.table("solTrainY.txt")
teste_x = read.table("solTestX.txt")
teste_y = read.table("solTestY.txt")
dim(treino_x)
dim(treino_y)
dim(teste_x)
dim(teste_y)
dataset = rbind(treino_x,teste_x)
dataset["y"] = rbind(treino_y,teste_y)
# sÃ£o 208 Fingerprints(indicadores de molÃ©culas), entÃ£o as Features de interesse sÃ£o as 20 restantes
Cor = cor(dataset[209:228])
dataTreino = treino_x
dataTreino["y"] = treino_y
dataTeste = teste_x
dataTeste["y"] = teste_y
# a matriz de correlaÃ§Ã£o, onde hÃ¡ 34 colunas com correlaÃ§Ã£o > 0.9
png("Matriz_CorrelaÃ§Ã£o_circulos.png")
corrplot(Cor, method = "number")
dev.off()
RemoverCorr = findCorrelation(cor(dataTreino), .9) # ==> 34 elementos
dataTreino = dataTreino[, -RemoverCorr]
dataTeste = dataTreino[, -RemoverCorr]
# Colunas finais removidas : NumAtoms, NumNonHAtoms, NumBonds, NumNonHBonds, NumMultBonds, NumHalogen, SurfaceArea2
#PCA
pca.data = prcomp(treino_x[1:228],scale=TRUE)
pdf("VariÃ¢ncia vs Componentes.pdf")
fviz_eig(pca.data,xlab="Componente",ylab="VariÃ¢ncia",addlabels = TRUE,main="VariÃ¢ncia vs Componentes")
dev.off()
ggplot(dataset,aes(dataset[,1])) + geom_histogram(color="black",fill="springgreen2")+theme_gray()+
labs(x=names(dataset[1]),y="FrequÃªncia")
# Scatter plot
setwd("D:/Eng.Comp/2019/2019.2/ICA/HW2/Histograma")
for(i in 1:228){
ggplot(dataset,aes(dataset[,i])) + geom_histogram(color="black",fill="springgreen2")+theme_gray()+
labs(x=names(dataset[i]),y="FrequÃªncia")
ggsave(paste(names(dataset[i]),".pdf"))
}
dev.off()
setwd("D:/Eng.Comp/2019/2019.2/ICA/HW2")
#                                               Parte 1 - Ordinary Linear Regression
#                                               Parte 2 - LÂ² Penalized Linear Regression
#                                               Parte 3 - PLS ou PCR
setwd("D:/Eng.Comp/2019/2019.2/ICA/HW2")
ggplot(dataset,aes(dataset[,i])) + geom_histogram(color="black",fill="springgreen2")+theme_gray()+
labs(x=names(dataset[i]),y="FrequÃªncia")
ggplot(dataset,aes(dataset[,i])) + geom_histogram(color="black",fill="springgreen2")+theme_gray()+
labs(x=names(dataset[i]),y="FrequÃªncia")
dataset = rbind(treino_x,teste_x)
treino_x = read.table("solTrainX.txt")
setwd("C:\Users\Glauton\Dropbox\Glauton\UFC\6-Sexto Semestre\ICA\homework2\TI0077_HW2_assignment")
setwd("C:/Users/Glauton/Dropbox/Glauton/UFC/6-Sexto Semestre/ICA/homework2/TI0077_HW2_assignment")
setwd("C:/Users/Glauton/Dropbox/Glauton/UFC/6-Sexto Semestre/ICA/homework2/TI0077_HW2_assignment")
setwd("C:/Users/Glauton/Dropbox/Glauton/UFC/6-Sexto Semestre/ICA/homework2/TI0077_HW2_assignment")
library(e1071)
library(ggplot2)
library(corrplot)
library(factoextra)
library(Metrics)
library(glmnet)
library(tidyverse)
library(caret)
library(foba)
library(ridge)
setwd("C:/Users/Glauton/Dropbox/Glauton/UFC/6-Sexto Semestre/ICA/homework2/TI0077_HW2_assignment")
#                                               Parte 0 - Pre Processamento
# o treino_y e teste_y Ã© a solubilidade de cada composto
treino_x = read.table("solTrainX.txt")
treino_y = read.table("solTrainY.txt")
teste_x = read.table("solTestX.txt")
teste_y = read.table("solTestY.txt")
dim(treino_x)
dim(treino_y)
dim(teste_x)
dim(teste_y)
dataset = rbind(treino_x,teste_x)
dataset["y"] = rbind(treino_y,teste_y)
# sÃ£o 208 Fingerprints(indicadores de molÃ©culas), entÃ£o as Features de interesse sÃ£o as 20 restantes
Cor = cor(dataset[209:228])
dataTreino = treino_x
dataTreino["y"] = treino_y
dataTeste = teste_x
dataTeste["y"] = teste_y
# a matriz de correlaÃ§Ã£o, onde hÃ¡ 34 colunas com correlaÃ§Ã£o > 0.9
png("Matriz_CorrelaÃ§Ã£o_circulos.png")
corrplot(Cor, method = "number")
dev.off()
RemoverCorr = findCorrelation(cor(dataTreino), .9) # ==> 34 elementos
dataTreino = dataTreino[, -RemoverCorr]
dataTeste = dataTreino[, -RemoverCorr]
# Colunas finais removidas : NumAtoms, NumNonHAtoms, NumBonds, NumNonHBonds, NumMultBonds, NumHalogen, SurfaceArea2
#PCA
pca.data = prcomp(treino_x[1:228],scale=TRUE)
pdf("VariÃ¢ncia vs Componentes.pdf")
fviz_eig(pca.data,xlab="Componente",ylab="VariÃ¢ncia",addlabels = TRUE,main="VariÃ¢ncia vs Componentes")
dev.off()
ggplot(dataset,aes(dataset[,1])) + geom_histogram(color="black",fill="springgreen2")+theme_gray()+
labs(x=names(dataset[1]),y="FrequÃªncia")
# Scatter plot
setwd("C:/Users/Glauton/Dropbox/Glauton/UFC/6-Sexto Semestre/ICA/homework2/TI0077_HW2_assignment")
for(i in 1:228){
ggplot(dataset,aes(dataset[,i])) + geom_histogram(color="black",fill="springgreen2")+theme_gray()+
labs(x=names(dataset[i]),y="FrequÃªncia")
ggsave(paste(names(dataset[i]),".pdf"))
}
dev.off()
setwd("C:/Users/Glauton/Dropbox/Glauton/UFC/6-Sexto Semestre/ICA/homework2/TI0077_HW2_assignment")
#                                               Parte 1 - Ordinary Linear Regression
#                                               Parte 2 - LÂ² Penalized Linear Regression
#                                               Parte 3 - PLS ou PCR
dev.off()
dev.off()
set.seed(18)
r = set.seed(18)
r
train.control_5 = trainControl(method = "cv", number = 5, returnResamp = "all")
train
train.control_5
fes.control_5 = trainControl(method = "cv", number = 5, returnResamp = "all")
fes
train.control_hekjd = trainControl(method = "cv", number = 5, returnResamp = "all")
train
train.control_hekjd
#                                               Parte 3 - PLS ou PCR
#                                               Parte 3 - PLS ou PCR
plsFit <- plsr(Solubility ~ ., data = trainingData)
train.control_5 = trainControl(method = "cv", number = 5, returnResamp = "all")
train.control_5
model5 = train(y~.,data=D_treino,method="ridge",trControl=train.control_5,tuneLength = 5,preProc=c("center","scale","YeoJohnson"))
model5 = train(y~.,data=dataTreino,method="ridge",trControl=train.control_5,tuneLength = 5,preProc=c("center","scale","YeoJohnson"))
set.seed(18)
train.control_5 = trainControl(method = "cv", number = 5, returnResamp = "all")
model5 = train(y~.,data=data_treino,method="ridge",trControl=train.control_5,tuneLength = 5,preProc=c("center","scale","YeoJohnson"))
set.seed(18)
train.control_5 = trainControl(method = "cv", number = 5, returnResamp = "all")
model5 = train(y~.,data=dataTreino,method="ridge",trControl=train.control_5,tuneLength = 5,preProc=c("center","scale","YeoJohnson"))
set.seed(18)
train.control_5 = trainControl(method = "cv", number = 5, returnResamp = "all")
model5 = train(y~.,data=dataTreino,method="ridge",trControl=train.control_5,tuneLength = 5,preProc=c("center","scale","YeoJohnson"))
set.seed(19)
train.control_6 = trainControl(method = "cv", number = 10, returnResamp = "all")
model6 = train(y~.,data=dataTreino,method="ridge",trControl=train.control_6,tuneLength = 5,preProc=c("center","scale","YeoJohnson"))
model5
model6
set.seed(18)
train.control_5 = trainControl(method = "cv", number = 5, returnResamp = "all")
model5 = train(y~.,data=dataTreino,method="ridge",trControl=train.control_5,tuneLength = 5,preProc=c("center","scale","YeoJohnson"))
set.seed(19)
train.control_6 = trainControl(method = "cv", number = 10, returnResamp = "all")
model6 = train(y~.,data=dataTreino,method="ridge",trControl=train.control_6,tuneLength = 5,preProc=c("center","scale","YeoJohnson"))
model5
model6
pred7 = predict(model5,dataTreino)
pred8 = predict(model6,dataTreino)
pred9 = predict(model5,D_teste)
pred10 = predict(model6,D_teste)
RMSE(pred7,dataTreino$y)
RMSE(pred8,dataTreino$y)
RMSE(pred9,D_teste$y)
RMSE(pred10,D_teste$y)
R2(pred7,dataTreino$y)
R2(pred8,dataTreino$y)
R2(pred9,D_teste$y)
R2(pred10,D_teste$y)
D9 = data.frame(dataTreino$y,pred7)
D10 = data.frame(dataTreino$y,pred8)
D11 = data.frame(D_teste$y,pred9)
D12 = data.frame(D_teste$y,pred10)
pdf("L2Treino5fold.pdf")
ggplot(D9,aes(dataTreino.y,pred7)) + geom_point(color="blue") + labs(title="L2_Treino: 5-fold",x="Predito",y="Observado")
dev.off()
pdf("L2Treino10fold.pdf")
ggplot(D10,aes(dataTreino.y,pred8)) + geom_point(color="blue") + labs(title="L2_Treino: 10-fold",x="Predito",y="Observado")
dev.off()
pdf("L2Teste5fold.pdf")
ggplot(D11,aes(dataTreino.y,pred9)) + geom_point(color="blue") + labs(title="L2_Teste: 5-fold",x="Predito",y="Observado")
dev.off()
pdf("L2Teste10fold.pdf")
ggplot(D12,aes(dataTreino.y,pred10)) + geom_point(color="blue") + labs(title="L2_Teste: 10-fold",x="Predito",y="Observado")
dev.off()
